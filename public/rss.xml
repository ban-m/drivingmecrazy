<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>どうにかなりそう</title>
        <link>https://drivingmecrazy.netlify.com</link>
        <description>ゲノム生物学&#x2F;計算生物学等の論文についてのメモや、他の覚書等</description>
        <generator>Gutenberg</generator>
        <language>ja</language>
        <atom:link href="https://drivingmecrazy.netlify.com/rss.xml/" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 14 Jun 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>RustからCの関数&#x2F;構造体&#x2F;ポインタをFFIを用いて使用する</title>
                <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/rust-c-ffi/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/rust-c-ffi/</guid>
                <description>&lt;h1 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h1&gt;
&lt;p&gt;Cのライブラリや関数をRustから呼ぶときの方法を記したもの。かなり互換性はあるが、変なところで詰まるので注意。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nei-rong&quot;&gt;内容&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;qian-zhi-ki&quot;&gt;前置き&lt;&#x2F;h2&gt;
&lt;p&gt;Cのコードを使いたいが、Cのコードは書きたくないことがある。例えば、Cで書かれたライブラリを使用するときなどだ。Bzip、Openssl、CPLEXなど、Cで書かれた高速・優秀なコードは山のようにあり、それらをRustで再発明するのは単に時間の無駄だ。&lt;&#x2F;p&gt;
&lt;p&gt;有名なライブラリだと、すでにラッパーライブラリや互換ライブラリが作られていることが多い。極端な話をすると、libcはRustに移植されて、&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libc&quot;&gt;libc&lt;&#x2F;a&gt;というライブラリになっている。ラッパーを書くのが大変&#x2F;プラットフォーム依存のコードがある場合は、&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-bindgen&quot;&gt;bindgen&lt;&#x2F;a&gt;という、C&#x2F;C++ライブラリから、自動でRustのバインディングを作るライブラリもある。これはコンパイル時にバインディングを作るので、プラットフォーム依存のコードもうまく扱える。&lt;&#x2F;p&gt;
&lt;p&gt;一方で、一瞬だけCで書いて、それをRustから呼ぶ、ということもある。Cのあるライブラリのごく一部だけを使ったサブルーチンを書いて、それをRustから直接呼びたいときだ。要するに、&lt;&#x2F;p&gt;
&lt;p&gt;データ -&amp;gt; Rust -&amp;gt; C -&amp;gt; Rust -&amp;gt; 出力&lt;&#x2F;p&gt;
&lt;p&gt;な時がある。アラインメントソフトは多くがCで書かれているため、実際にこれをしたいことは頻繁に起こる。当然、一時ファイルをかませて、&lt;&#x2F;p&gt;
&lt;p&gt;データ -&amp;gt; Rust -&amp;gt; 中間ファイル -&amp;gt; C -&amp;gt; 中間ファイル -&amp;gt; Rust -&amp;gt; 出力　としてもいいが、余分なI&#x2F;Oが入ってしまう。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-zhuang&quot;&gt;実装&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;ban-m&#x2F;call_c_function_from_rust&#x2F;src&quot;&gt;bitbucket レポジトリ&lt;&#x2F;a&gt;にコードを全て置いてあるので、再現したいひとは、クローンして &lt;code&gt;make&lt;&#x2F;code&gt;して&lt;code&gt;cargo run&lt;&#x2F;code&gt;してください。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cnonullary-function-wohu-bu&quot;&gt;Cのnullary function を呼ぶ&lt;&#x2F;h3&gt;
&lt;p&gt;まず、Cの関数を定義してみよう。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(stdout,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;hello from C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;gcc&lt;&#x2F;code&gt;でコンパイルして、ライブラリを作成しよう。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;gcc -g -Wall -fPIC -c -O2&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; .&#x2F;src&#x2F;test.c&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; .&#x2F;target&#x2F;libtest.a&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで&lt;code&gt;.&#x2F;target&#x2F;libtest.a&lt;&#x2F;code&gt;がコンパイルできた。このライブラリをインクルードして、&lt;code&gt;hello_world&lt;&#x2F;code&gt;をRustから呼ぶには、すこし工夫が必要になる。&lt;&#x2F;p&gt;
&lt;p&gt;まず、ビルドツール&lt;code&gt;cargo&lt;&#x2F;code&gt;に、このライブラリをリンクすることと、このライブラリのパスを教えないといけない:&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#path&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;path&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Cで言うところの&lt;code&gt;-L &#x2F;path&#x2F;to&#x2F;library -l[library name]&lt;&#x2F;code&gt;をする。ちなみに、Rustもデフォルトのリンカーは&lt;code&gt;ld&lt;&#x2F;code&gt;なので、&lt;code&gt;ld&lt;&#x2F;code&gt;の探すパスを変更すると、&lt;code&gt;cargo&lt;&#x2F;code&gt;も影響を受ける&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;そのために、&lt;strong&gt;プロジェクトのルートに&lt;&#x2F;strong&gt;&lt;code&gt;build.rs&lt;&#x2F;code&gt;というファイルを作成する。中身を次のようにする。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;std::env;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; project_dir = env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;CARGO_MANIFEST_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;cargo:rustc-link-search=&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;&#x2F;target&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;, project_dir); &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;&#x2F; the &amp;quot;-L&amp;quot; flag&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;cargo:rustc-link-lib=test&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;); &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;&#x2F; the &amp;quot;-l&amp;quot; flag&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここに書いたプログラムは、&lt;code&gt;.&#x2F;src&#x2F;&lt;&#x2F;code&gt;のファイルがコンパイルされる前にコンパイルされる。そのときに、標準出力をキャッチして、それを環境変数に組み込む。けっこうとんでもない設定だが、&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;build-scripts.html&quot;&gt;そうしろと書いてあるのでそうする&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;この後、&lt;strong&gt;.&#x2F;src&#x2F;main.rs&lt;&#x2F;strong&gt;に、先ほどのCのコードのバインディングを書く。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;&#x2F; Binding&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;  {&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;()};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cの関数は（内部で何をするか、本当にわからないので）&lt;code&gt;unsafe&lt;&#x2F;code&gt;ブロックで囲う必要がある。この中で起きていることに関しては、コンパイラは本当に何も言わないので、本当に注意する必要がある。例えば、この中では&lt;strong&gt;生ポインタに加算して参照を外&lt;&#x2F;strong&gt;せたりする。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo run&lt;&#x2F;code&gt;すると、標準出力に&lt;code&gt;hello,world&lt;&#x2F;code&gt;と表示されるはずだ。:&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#fPIC&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;fPIC&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;たまに長大なエラーが出ることがある。エラーメッセージを読むと、たいてい、&lt;code&gt;-fPIC&lt;&#x2F;code&gt;フラグを&lt;strong&gt;ライブラリのビルド時に&lt;&#x2F;strong&gt;渡せと書いてある。その通りにすると、うまく動く。&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;c-nounary-functionwohu-bu&quot;&gt;C のunary functionを呼ぶ。&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;two_times&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(stdout,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,x);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;*x;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これも同じようにすればいい。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;std::os::raw::&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;&#x2F; Integer in C language. Almost always, it is just i32.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;  {&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;two_times&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int)-&amp;gt;c_int;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;two_times&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;));&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;簡単！　型に注意しよう。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-noxing-to-c-nogou-zao-ti-wotong-yi-shi-suru&quot;&gt;Rust の型と C の構造体を同一視する&lt;&#x2F;h3&gt;
&lt;p&gt;Cの関数で、C言語内部で定められた型を要求するものがある。例えば、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; inner;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;} Test;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;print_test&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(Test &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(stdout,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,t.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;というコードなどだ。&lt;&#x2F;p&gt;
&lt;p&gt;バインディングを書くときは、構造体もRust内で用意してやる必要がある。構える必要はなくて、単に&lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt;と書いてやれば、Cがやる通りに変数を並べる。つまり、バイト列としても互換性がある型を用意できる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(Debug)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(C)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;Test{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;print_test&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:Test);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; test = Test{inside:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;print_test&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(test);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;構造体をRustで作って、Cに渡している。ここには境界がないように見える！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ckarapei-lie-womorau&quot;&gt;Cから配列をもらう&lt;&#x2F;h3&gt;
&lt;p&gt;当然、配列の受け渡しも可能だ。というのも、つまるところ、Cにおいて、配列とは、ヒープにおける配列の先頭を指すポインタに過ぎない。ポインタは単なるメモリ番地だと思うことができる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;construct_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;* array = (&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;*)(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;) * length));&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;; i &amp;lt; length ; i ++){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;array[i] = i;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; array;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただ、注意するべきこととして、使い終わったメモリについてはよく考える必要がある。Rustは所有権システムを用いていて、所有権を持っているものは何であれ、スコープから抜けたときに削除する。配列も例外ではなく、&lt;code&gt;free()&lt;&#x2F;code&gt;が呼ばれるのもこのタイミングだ。&lt;&#x2F;p&gt;
&lt;p&gt;一方で、Cでアロケーションされたメモリを、Rustで&lt;code&gt;free()&lt;&#x2F;code&gt;するのは&lt;strong&gt;本当に危険だ&lt;&#x2F;strong&gt;。というのも、このメモリはRustのメモリアロケーションプログラムで確保されたものではないため、Rustのデアロケーションはうまくいかない可能性がある。&lt;&#x2F;p&gt;
&lt;p&gt;短く言うとこうだ：&lt;strong&gt;Cが確保したメモリはCが解放する。Rustが確保したメモリはRustが解放する&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;なぜCの方で&lt;code&gt;free_array&lt;&#x2F;code&gt;があるかわかってもらえたと思う。&lt;&#x2F;p&gt;
&lt;p&gt;Rustのバインディングは&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;construct_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int)-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; c_int;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; c_int);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; length = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; array = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;construct_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(length);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;Vec::from_raw_parts(a, length as &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;, length as &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(array.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;as_mut_ptr&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;std::mem::forget(array); &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;&#x2F; Indeed needed.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最後の&lt;code&gt;std::mem::forget(array)&lt;&#x2F;code&gt;を行わないと、ダブルフリーに似た現象が起こる。つまり、&lt;code&gt;free_array()&lt;&#x2F;code&gt;で解放したメモリを、Rustのデアロケータが解放しようとする。実際、この行をコメントアウトするとセグフォする:&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#mem&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;もう一つ例として、配列を持った構造体を考えてみる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;* array;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; length;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;} IntVector;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;IntVector &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;construct_seq&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;* array = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;construct_array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(length);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;IntVector res = {array,length};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; res;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(IntVector* &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(stdout,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;dropping from C...:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,vec-&amp;gt;array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(vec-&amp;gt;array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rustのバインディングは次の通りになる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;construct_seq&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int)-&amp;gt; IntVector;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&amp;amp;IntVector);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(Debug)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(C)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;IntVector{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; c_int,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;: c_int,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; array = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;construct_seq&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(length)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&amp;amp;array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回は&lt;code&gt;mem::forget()&lt;&#x2F;code&gt;によってデストラクタが走るのを防ぐのは必要ではない。この例では、内側の配列は&lt;code&gt;*const c_int&lt;&#x2F;code&gt;で表される、単なるポインタなので、Drop時にも、とくに&lt;code&gt;free()&lt;&#x2F;code&gt;されることはない。
しかし、当然、&lt;code&gt;free_vec()&lt;&#x2F;code&gt;を呼ぶ必要はあり、そうしないとメモリリークする（&lt;code&gt;valgrind&lt;&#x2F;code&gt;等で検出できる）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nan-siili&quot;&gt;難しい例&lt;&#x2F;h3&gt;
&lt;p&gt;最後に、『内側に&lt;code&gt;Test&lt;&#x2F;code&gt;という構造体の配列を持った構造体の配列』を渡すことを考えてみる。この例はよくあり、例えば、あるリードをリファレンスに当てて、アラインメントを全て持ってくると、それは『Cigarという構造体の配列を持った、アラインメントという構造体の配列』になる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;Test *array;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; length;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;} TestVec;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(TestVec* &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(stdout,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;dropping from C...&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,tv-&amp;gt;array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(tv-&amp;gt;array);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;TestVec* &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;allocate_testvec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;totlen&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; len = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;TestVec *result = (TestVec*)(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(sizeof(TestVec)*len));&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;* Initialization start *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;; i &amp;lt; len ; i ++){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;result[i].&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;= (Test*)(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(sizeof(Test)*i));&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;; j &amp;lt; i ; j ++){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;result[i].&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;[j].&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;inner &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;= i*j;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;result[i].&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;= i;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#65737e;&quot;&gt;&#x2F;* init end *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;*totlen = len;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; result;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_testvec_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(TestVec *&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;; i &amp;lt; length ; i ++){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;free_tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&amp;amp;tv[i]);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(tv);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rustのバインディングを書くとき、*これはRustの&lt;code&gt;free()&lt;&#x2F;code&gt;が走る構造体か？*と考えながら書かなければいけない。&lt;code&gt;Vec&lt;&#x2F;code&gt;は&lt;code&gt;free()&lt;&#x2F;code&gt;が走る。もっと言うと、ヒープにアロケートされる構造体は全て&lt;code&gt;free()&lt;&#x2F;code&gt;が走る。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b&quot;&gt;
&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;  {&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;tv&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&amp;amp;TestVec);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;allocate_testvec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;totlen&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; c_int)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; TestVec;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;free_testvec_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;tvs&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; TestVec, &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(Debug)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(C)]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;TestVec{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; Test,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;:c_int,&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(){&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; totlen = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;std::vec::Vec::from_raw_parts(result,totlen as &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;,totlen as &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt; tv in &amp;amp;result{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&amp;quot;,tv);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#b48ead;&quot;&gt;unsafe&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;free_testvec_vec&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#96b5b4;&quot;&gt;as_mut_ptr&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;(),totlen);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;};&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;std::mem::forget(result);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最後の&lt;code&gt;mem::forget()&lt;&#x2F;code&gt;を忘れないこと。&lt;&#x2F;p&gt;
&lt;p&gt;余談だが、場合によっては&lt;code&gt;Drop&lt;&#x2F;code&gt;トレイトを実装して、Rust側の&lt;code&gt;free()&lt;&#x2F;code&gt;が呼ばれるのを防ぐこともできる。ただ、&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;に対して、&lt;code&gt;Drop&lt;&#x2F;code&gt;を上書きして実装することはできない。というのも、このとき、構造体もトレイトも標準ライブラリ由来で、自分が作ったものではないからだ。どちらかが自分の作ったものであるならば、実装できるので、ラッパー構造体を作るのもよい。&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;mem&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;code&gt;mem::forget()&lt;&#x2F;code&gt;は&lt;code&gt;unsafe&lt;&#x2F;code&gt;ではない。これはちょっと不思議だが、実は、Rustは一方向の安全性しか担保してないことを思い出すと、納得できる。つまり、&lt;em&gt;参照した場所は必ずあるが、参照できなくなった場所が必ずなくなるとは限らない&lt;&#x2F;em&gt;。例えば、途中で&lt;code&gt;exit()&lt;&#x2F;code&gt;すると、確保されていたオブジェクトたちは&lt;code&gt;free()&lt;&#x2F;code&gt;されない。&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>Rust言語でファイルI&#x2F;Oと入力の処理を別のスレッドで実行する(非同期I&#x2F;O)</title>
                <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/nonblockingio/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/nonblockingio/</guid>
                <description>&lt;h1 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h1&gt;
&lt;p&gt;タイトル通り、Rust言語で、入力（ファイルの読み込み）をあるスレッドで行い、入力の処理を別のスレッドで行うプログラムを書く。&lt;&#x2F;p&gt;
&lt;p&gt;なぜこんな処理が必要になっているかというと、ファイルシステムが（単にインターネットを介しているなどの理由で）遅いことがあるからだ。また、データを一つずつ処理できるときは、いちいち&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;などのコンテナにアロケートするより、出てきた順に処理した方が早くなりそう。&lt;&#x2F;p&gt;
&lt;p&gt;要点としては、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;を使ってデータのやり取りをするのはヤバい&lt;&#x2F;li&gt;
&lt;li&gt;Multiple producer, single consumer channelが標準ライブラリに実装されているので、それを使う&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;となる。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>塩基配列の圧縮について</title>
                <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/about-sequence-compression/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/about-sequence-compression/</guid>
                <description>&lt;h2 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h2&gt;
&lt;p&gt;DNAシークエンサーの出力を圧縮することについてのメモ。
対象は&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ゲノムを扱っている&lt;&#x2F;li&gt;
&lt;li&gt;バイオインフォマティシャンで&lt;&#x2F;li&gt;
&lt;li&gt;配列の圧縮に興味がある&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;人。いくつかの基本的な考え方と、現状の圧縮アルゴリズムの方針について簡単に述べる。
配列圧縮の有用性については&lt;strong&gt;書かない&lt;&#x2F;strong&gt;。（そもそも、配列なんて圧縮しなくても、二次記憶は十分にある、という考え方は完全に妥当だし、私もこの意見には賛同する。一方で、配列の圧縮は、HDDやSSDにどうやって保存するのか、という問題以上の価値が実はある）&lt;&#x2F;p&gt;
&lt;p&gt;基本的には、DNAシークエンサーとしてはilluminaのWGSデータを考える。つまり、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;リードはだいたい100塩基で、&lt;&#x2F;li&gt;
&lt;li&gt;エラー率は1％くらいで、&lt;&#x2F;li&gt;
&lt;li&gt;あるゲノムがあって、そこから（バイアスはあるにせよ）サンプリングされている&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;という状況だ。もう少し、プロ出ない人向けに言い直すと、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DNAシークエンサーは、DNA全長を読めるわけではなく、断片をちょっと読むのと大量に繰り返すのだが、&lt;&#x2F;li&gt;
&lt;li&gt;その一回の読み取り量が100塩基くらいで、&lt;&#x2F;li&gt;
&lt;li&gt;読み取りを失敗する確率が、塩基あたり1%くらいで、&lt;&#x2F;li&gt;
&lt;li&gt;事前に「これは人のゲノムを読んでいます」「トマトです」と言った事前知識がある&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということだ。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>A Short Introduction to Rust Language</title>
                <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/introduction-to-rust-language/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/introduction-to-rust-language/</guid>
                <description>&lt;h1 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h1&gt;
&lt;p&gt;Rust言語についてのイントロダクション。&lt;&#x2F;p&gt;
&lt;p&gt;対象としては、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C&#x2F;C++&#x2F;pythonを使っている&lt;&#x2F;li&gt;
&lt;li&gt;バイオインフォマティシャン&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;を想定していて、Fasta&#x2F;Fastqファイル等々のI&#x2F;Oを含めて、ある程度読み書きできるようになることを目標にしています。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>手作りデータ構造：BloomFilter to count k-mers in a dataset</title>
                <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/handmade-bloom-filter-in-rust/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/handmade-bloom-filter-in-rust/</guid>
                <description>&lt;h2 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h2&gt;
&lt;p&gt;データ内のk-merを数えるためのBloomFilterをRustで実装するときのテクについていくつか書いたもの。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;k-mer: 長さkの文字列のこと。k-gramと同じものを指す。例えば、&amp;quot;AAA&amp;quot;は3-mer。&lt;&#x2F;li&gt;
&lt;li&gt;BloomFilter:　複数のハッシュ関数を用いて、要素のフィンガープリントを作ることで、Hashableな要素からなる集合をコンパクトかつ高速に表すためのデータ構造。&lt;&#x2F;li&gt;
&lt;li&gt;Rust: Rustとは、安全性、平行性、そして速度に焦点を当てたシステムプログラミング言語です。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;今回は諸事情があって、文字列をアルファベット{A,C,G,T}上のものに絞る。&lt;&#x2F;p&gt;
&lt;p&gt;実装は&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;yoh_ikkaidoh&#x2F;handmade_bloom_filter&#x2F;src&#x2F;master&#x2F;&quot;&gt;bitbucket.org&lt;&#x2F;a&gt;においてある。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>実は甘くないイチゴゲノムについて</title>
                <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/about-strawberry-genome/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/about-strawberry-genome/</guid>
                <description>&lt;h1 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h1&gt;
&lt;p&gt;今週発表された苺ゲノムのアセンブリについての雑感を記したもの。アセンブリについて述べる。&lt;&#x2F;p&gt;
&lt;p&gt;ベースになる論文は2月26日にNature Genetics に出版された&lt;a href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;s41588-019-0356-4&quot;&gt;Origin and evolution of the octoploid strawberry genome&lt;&#x2F;a&gt;である。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>論文紹介：Small is big in &lt;i&gt;Arabidopsis&lt;&#x2F;i&gt; mitochondrial ribosome</title>
                <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/paper-small-is-big/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/paper-small-is-big/</guid>
                <description>&lt;h2 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h2&gt;
&lt;p&gt;論文紹介第1回（0回は先日行った）。今回はバイオインフォではなく、植物生物学の論文を紹介する。&lt;&#x2F;p&gt;
&lt;p&gt;タイトルは Small is big in &lt;i&gt;Arabidopsisi&lt;&#x2F;i&gt;mitochondria。リンクは&lt;a href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;s41477-018-0339-y&quot;&gt;ここ&lt;&#x2F;a&gt;(Nature plantのページが開きます。)
内容としては、植物、得にシロイヌナズナのミトコンドリア内のリボソームの構造を解析した論文。
研究チームはフランス。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>論文紹介#0</title>
                <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/paper-a-pitfall-ml-method/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/paper-a-pitfall-ml-method/</guid>
                <description>&lt;h2 id=&quot;korehahe&quot;&gt;これは何？&lt;&#x2F;h2&gt;
&lt;p&gt;今年は生産性を上げるために、読んだ論文の要旨をまとめる。これはその第一弾。&lt;&#x2F;p&gt;
&lt;p&gt;読む論文は&lt;a href=&quot;https:&#x2F;&#x2F;www.biorxiv.org&#x2F;content&#x2F;early&#x2F;2019&#x2F;01&#x2F;04&#x2F;512434&quot;&gt;これ&lt;&#x2F;a&gt;(リンク先はbioRxiv)。&lt;&#x2F;p&gt;
&lt;p&gt;別にインターネットに書く必要はないが、これから同じ論文を参照することになる、日本語が読める人向けに残しておくことにする。&lt;&#x2F;p&gt;
&lt;p&gt;本記事はいくつかの理由で削除されうるし、内容に関してはほとんど責任を取らない。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Processing Practice</title>
                <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/processing/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/processing/</guid>
                <description>&lt;script src = &quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;p5.js&#x2F;0.7.2&#x2F;p5.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div id = &quot;canvas&quot;&gt;&lt;&#x2F;div&gt;
&lt;script src = &quot;.&#x2F;processing.js&quot;&gt;&lt;&#x2F;script&gt;
</description>
            </item>
        
            <item>
                <title>最短共通包含文字列問題について</title>
                <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/about-scs/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/about-scs/</guid>
                <description>&lt;h2 id=&quot;jin-ri-shu-kukoto&quot;&gt;今日書くこと&lt;&#x2F;h2&gt;
&lt;p&gt;今日は最短共通包含文字列問題(Shortest Common Superstring Problem)という問題がNP完全であることを示す。&lt;&#x2F;p&gt;
&lt;p&gt;なんで突然こんな話を始めたかと言うと、これはゲノムアセンブリに関わっているからで（最近、ゲノムアセンブリについて
ずっと書いているが、僕は別にゲノムをアセンブルするような趣味も研究もしていない）、具体的には、次のようになる。&lt;&#x2F;p&gt;
&lt;p&gt;ゲノムアセンブリ（短いDNA断片から、元のゲノムを復元する）は、要するに、DNA断片の集合から、それらを
うまく『説明』するような配列を生成しろ、という問題だと思うことが出来る。&lt;&#x2F;p&gt;
&lt;p&gt;この『説明』というのが難しく、一体何を持って説明とするかは議論の分かれるところである。&lt;&#x2F;p&gt;
&lt;p&gt;例えば、&lt;em&gt;すべてのDNA断片を部分文字列として含む&lt;&#x2F;em&gt;というのを、『説明する』ことだとすると――確かに、
この定義は、DNA断片が虚空からではなく、ゲノムから読まれていると言うことは保証してくれるが――
色々と問題がある。&lt;&#x2F;p&gt;
&lt;p&gt;というのも、この定義に則って言えば、得られたDNA断片をすべて連接（つなげて）出力したものも、
DNA断片を『説明する』事になってしまうからだ。
もちろん、ゲノムを何十回・何百回を読んだ結果としてDNA断片たちが得られていると考えると、
このアセンブリは長すぎる。&lt;&#x2F;p&gt;
&lt;p&gt;この『長過ぎる』ということを逆手に取って、では、次のように定義してみてはどうだろうか。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;『説明する』とは、すべてのDNA断片を部分文字列として含むような文字列のうち、かなり短いものである&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;もちろん、問題を&lt;em&gt;かなり&lt;&#x2F;em&gt;の部分に押し付けているだけなのだが、これを&lt;em&gt;最も短い&lt;&#x2F;em&gt;としたものが、
まさにShortest common superstring problemという問題である。&lt;&#x2F;p&gt;
&lt;p&gt;今日は、この問題の厳密な定義から始めて、これが難しいことを示す。
論文としては、&lt;&#x2F;p&gt;
&lt;p&gt;Gallant, J., Maier, D. and Astorer, J., 1980. On finding minimal length superstrings. Journal of Computer and System Sciences, 20(1), pp.50-58.(https:&#x2F;&#x2F;doi.org&#x2F;10.1016&#x2F;0022-0000(80)90004-5)&lt;&#x2F;p&gt;
&lt;p&gt;をほぼ完コピします。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>de Brujin Graphについてメモ</title>
                <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/about-de-brujin-graph/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/about-de-brujin-graph/</guid>
                <description>&lt;h2 id=&quot;shu-kukoto&quot;&gt;書くこと&lt;&#x2F;h2&gt;
&lt;p&gt;さてみなさん、我々は今や、&lt;a href=&quot;https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;projects&#x2F;genome&#x2F;guide&#x2F;human&#x2F;&quot;&gt;ヒトのゲノムをダウンロードできる&lt;&#x2F;a&gt;時代に生きていますが、
このゲノムとやらが、どのように作られて来たかは、かまぼこがどのように作られているか程度にしか知られていない、と思われる。
本日は、みなさんに、バイオインフォマティクスの一分野である、ゲノムアセンブリにおいてよく用いられている、de Brujin Graph（ド・ブロイグラフと日本語で発音する人がいるが、多くの外国語がそうであるように、これもまたオランダ語を流暢に話す人々のみに話せる単語らしい）と言うものについて解説します&lt;&#x2F;p&gt;
&lt;p&gt;もう少し簡単に言うと、こうなるります。&lt;strong&gt;あなたはある本Bを持っています。100冊のBをシュレッダーにかけてしまいました。シュレッダーから出てきた断片から、元の本を再構成するには、どうしたらよいでしょう？&lt;&#x2F;strong&gt; どのようなアルゴリズムを考えつくだろうか？　それはどのくらいきちんと動くだろうか？&lt;&#x2F;p&gt;
&lt;p&gt;または、次のような問いかけでもよい：あなたはピカソの絵を大量にコピーし、それをバラバラに切り刻みました。どのように元のピカソの絵を復元できるだろうか？&lt;&#x2F;p&gt;
&lt;p&gt;かなりインフォーマルに書くが、記法と正確性には気をつけようと思っている。&lt;&#x2F;p&gt;
&lt;p&gt;また、文末に参考文献をつけておくので、興味がある人は、自分でサーベイや実装をしてみてほしい。&lt;&#x2F;p&gt;
&lt;p&gt;もちろん、誤植や誤記、私が間違えている場所はありうるので、見つけ次第、Twitterかメールで報告していただけると、嬉しいです。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>About</title>
                <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/./about_me/</link>
                <guid>https://drivingmecrazy.netlify.com/./about_me/</guid>
                <description>&lt;h2 id=&quot;he-woshu-iteiruka&quot;&gt;何を書いているか&lt;&#x2F;h2&gt;
&lt;p&gt;ゲノム生物学や、計算生物学の論文についてのメモ・解説や、
個人的に勉強していることや、主張などを書いています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enzinnituite&quot;&gt;エンジンについて&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getgutenberg.io&#x2F;&quot;&gt;Gutenberg&lt;&#x2F;a&gt;という&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt;言語製の静的サイトジェネレータを使って
出力し、&lt;a href=&quot;https:&#x2F;&#x2F;www.netlify.com&#x2F;&quot;&gt;netlify&lt;&#x2F;a&gt;を用いてデプロイを行っています。&lt;&#x2F;p&gt;
&lt;p&gt;Gutenbergを使っている理由は、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;JekyllやPelicanは体感として遅すぎるし、やや混沌としている&lt;&#x2F;li&gt;
&lt;li&gt;HugoはGoで書かれているので使いたくない&lt;&#x2F;li&gt;
&lt;li&gt;Rustなら何かあってもソースコードが読める&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;等の理由があります。
要するに好みの問題です。&lt;&#x2F;p&gt;
&lt;p&gt;テーマは&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Keats&#x2F;hyde&quot;&gt;hyde&lt;&#x2F;a&gt;を日本語がなんとなく出るように改変していますが、
まだあまりまともとは言い難い状況です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-nituite&quot;&gt;私について&lt;&#x2F;h2&gt;
&lt;p&gt;日本国東京都の大学で大学院生（M1）をしています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lian-luo-shou-duan&quot;&gt;連絡手段&lt;&#x2F;h2&gt;
&lt;p&gt;Twitterもしくは電子メールでの連絡がとれます。詳しくは、サイドバーにあるアイコンからアクセスしてください。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>コムギゲノム雑感</title>
                <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
                <link>https://drivingmecrazy.netlify.com/blog/about-wheat-genome/</link>
                <guid>https://drivingmecrazy.netlify.com/blog/about-wheat-genome/</guid>
                <description>&lt;h2 id=&quot;shu-kukoto&quot;&gt;書くこと&lt;&#x2F;h2&gt;
&lt;p&gt;先日、Scienceでコムギのゲノムに関する研究が出版されたのだが、次のような速報で取り沙汰されていた。&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;コムギのゲノム、完全解読に初めて成功 &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;vYzyXelSPa&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;vYzyXelSPa&lt;&#x2F;a&gt; 異質6倍体であるコムギのゲノムを解読。転写解析も。Science原著↓ &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;rE2FCQ8qfN&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;rE2FCQ8qfN&lt;&#x2F;a&gt;   &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;OiZjFtA6vw&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;OiZjFtA6vw&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; 俺のソース (論文紹介) (@OrenoSource) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;OrenoSource&#x2F;status&#x2F;1030290485535887361?ref_src=twsrc%5Etfw&quot;&gt;August 17, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1126&#x2F;science.aar6089&quot;&gt;原著論文&lt;&#x2F;a&gt;から辿れるアルトメトリックを見た感じでは、このPostが、日本においては最もRT&#x2F;Fabされているように見受けられる。&lt;&#x2F;p&gt;
&lt;p&gt;私見では、このPostは、間違ってはいないと思うが、少しざっくり書きすぎだと感じる。具体的には、完全読解を『ゲノムの文字を全て正しく並べる』という意味で使っているなら、コムギのゲノムの完全解読は未だできていない。より一般に、真核多細胞生物のゲノムで、完全解読されているものを、僕は知らない（線虫のゲノムは完全解読されている、と&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Caenorhabditis_elegans&quot;&gt;英版wikipedia&lt;&#x2F;a&gt;には書いてあるが、これは嘘です）。&lt;&#x2F;p&gt;
&lt;p&gt;例えば、コムギは21本*2の染色体を持つが、今回発表されたのは138,665本の配列だ。ゲノムサイズは15.76Gbpだが、上記の138,665本を全て繋いでも、14.5Gbpにしかならない。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに、植物モデル生物シロイヌナズナは、約140Mbpくらいで、染色体は5本、配列は100本である。&lt;&#x2F;p&gt;
&lt;p&gt;今日は、『ゲノムの文字を正しく並べる』（ゲノムアセンブリを行う、という）ことが何を指しているのか、これまで何がされてきたのか、どんな技術があるか、といった周辺知識を書いておくことで、140字には載り切らなかったであろう情報を補填しておきたい。&lt;&#x2F;p&gt;
&lt;p&gt;一応、確認を取りながら書いていくつもりだが、もちろん、たくさん間違いがあると思うので、見つけ次第、Twitterやメールで教えていただけると嬉しいです。&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
